HERANÇA EM JAVA
-----------------------------

► OBJETIVO DA HERANÇA

A herança em Java serve para criar uma estrutura base (classe pai) e permitir
que outras classes (subclasses ou classes filhas) reutilizem os atributos e métodos
já definidos. 

Isso traz dois grandes benefícios:
1. Reutilização de código — evita repetir código igual em várias classes.
2. Organização — deixa o código mais limpo e fácil de manter.

A classe pai (superclasse) costuma armazenar os atributos e métodos que
serão compartilhados pelas subclasses.  
Assim, a subclasse herda essas características e pode:
- Reutilizar os métodos e atributos da classe pai.
- Criar seus próprios métodos específicos.
- Sobrescrever (modificar) métodos herdados, se precisar alterar o comportamento.

---------------------------------------

► EXEMPLO SIMPLES:

Classe Pai: Animal  
Classe Filha: Gato

O Gato herda os atributos e métodos da classe Animal,
como o atributo “nome” e o método “emitirSom()”.

---------------------------------------

► CONSTRUTOR E O USO DO SUPER()

Quando uma subclasse é criada, ela pode chamar o construtor da classe pai
para aproveitar sua inicialização.

Exemplo:

    public Gato(String nome) {
        super(nome);
    }

O comando “super(nome)” chama o construtor da classe pai (Animal),
passando o valor “nome” como argumento.  
Isso faz com que o atributo “nome” seja armazenado dentro da classe Animal,
mas como a subclasse herda esse atributo, ela também pode utilizá-lo normalmente.

Ou seja:
- O atributo fica na classe pai.
- A subclasse herda e tem acesso a ele.

---------------------------------------

► ANOTAÇÃO @Override

A anotação @Override serve para indicar que um método da subclasse está
sobrescrevendo (reescrevendo) um método já existente na classe pai.

Exemplo:

    @Override
    public void emitirSom() {
        System.out.println(nome + " está fazendo: miau!");
    }

Ela é muito importante porque:
- Garante que o nome e os parâmetros do método sejam exatamente os mesmos da superclasse.
- Se houver erro de digitação (como “emitiSom”), o compilador mostrará erro.
- Isso evita confusões e garante que a sobrescrita é intencional e correta.

---------------------------------------

► USO DO super DENTRO DE MÉTODOS

Além do construtor, podemos usar “super” dentro de métodos para chamar
versões da classe pai.

Exemplo:

    public void EmitirSomAnimal() {
        super.emitirSom();  // Chama o método da classe pai
    }

Isso é útil quando queremos aproveitar o comportamento da classe pai,
mas também adicionar algo novo na subclasse.

---------------------------------------

► RESUMO

- “extends” → indica que uma classe herda de outra.
- “super()” → chama o construtor da classe pai.
- “super.metodo()” → chama um método específico da classe pai.
- “@Override” → garante que o método foi sobrescrito corretamente.
- A herança melhora a reutilização e a organização do código.

---------------------------------------

Exemplo prático:

    Animal garfield = new Gato("Garfield");
    garfield.emitirSom();     // Miau!
    ((Gato)garfield).ronronar();  // Método exclusivo da subclasse

---------------------------------------

Autor: Maiquel
Estudo: Conceito de Herança em Java
