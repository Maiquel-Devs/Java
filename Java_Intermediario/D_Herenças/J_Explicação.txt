üìò Conceito de Heran√ßa em Java

‚û°Ô∏è A **heran√ßa** √© um dos principais pilares da Programa√ß√£o Orientada a Objetos (POO).
Seu objetivo √© **reutilizar c√≥digo** e **organizar melhor a estrutura** das classes.

---

üë®‚Äçüëß Rela√ß√£o entre Classe Pai e Subclasse

- A **classe pai (ou superclasse)** define atributos e comportamentos comuns.
- A **subclasse (ou classe filha)** herda esses atributos e m√©todos, podendo us√°-los ou modific√°-los.
- Isso evita repeti√ß√£o de c√≥digo e facilita a manuten√ß√£o do programa.

Exemplo pr√°tico:
- Classe Pai: `Animal`
- Subclasse: `Gato`
O `Gato` herda as caracter√≠sticas do `Animal`, como o atributo `nome` e o m√©todo `emitirSom()`.

---

üîπ Construtor com `super()`

O m√©todo `super()` √© usado dentro da subclasse para **chamar o construtor da classe pai**.
Isso permite inicializar corretamente os atributos herdados.

Exemplo:
```java
public Gato(String nome) {
    super(nome); // Chama o construtor da classe Animal e passa o nome
}
```

O atributo `nome` √© armazenado dentro da **classe pai (Animal)**, mas pode ser acessado pela subclasse, pois foi herdado.

---

üîπ Sobrescrita com `@Override`

A anota√ß√£o `@Override` √© usada quando a subclasse **redefine um m√©todo** que j√° existe na classe pai.
Isso indica ao Java que o m√©todo original foi **substitu√≠do** por uma nova implementa√ß√£o.

Exemplo:
```java
@Override
public void emitirSom() {
    System.out.println(nome + " est√° fazendo: miau!");
}
```

O uso de `@Override` **evita erros** e **deixa o c√≥digo mais claro**, pois o Java verifica se realmente existe um m√©todo com o mesmo nome na classe pai.

---

‚úÖ Em resumo:

- A **classe pai** concentra os atributos e m√©todos comuns.
- As **subclasses** herdam esses comportamentos e podem personaliz√°-los.
- O `super()` chama o construtor ou m√©todos da classe pai.
- O `@Override` sobrescreve m√©todos herdados, garantindo compatibilidade e clareza.

---

üéØ Vantagens da Heran√ßa:
- Reutiliza√ß√£o de c√≥digo
- Organiza√ß√£o do projeto
- Manuten√ß√£o facilitada
- Estrutura hier√°rquica clara
